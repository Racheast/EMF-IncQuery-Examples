package org.eclipse.incquery.examples.bpmn.ttc2013.queries

import "http://www.omg.org/spec/BPMN/20100524/MODEL"
import "http://bpmn20exec"

pattern startEvent(event : StartEvent) {
	StartEvent(event);
}

pattern endEvent(event : EndEvent) {
	EndEvent(event);
}

pattern tokenOnElement(element : FlowElement, token : Token) {
	Token.element(token, element);
}


pattern startEventWithDefinition(startEvent : StartEvent) {
	StartEvent.eventDefinitions(startEvent, eventDefinition);
	EventDefinition(eventDefinition);
}


pattern startEventOfProcess(process : Process, event : StartEvent) {
	Process(process);
	Process.flowElements(process, event);
	StartEvent(event);
}

pattern timerEventDefinitions(timerEventDefinition : TimerEventDefinition) {
	TimerEventDefinition(timerEventDefinition);
}

pattern startEventDefWOTimedEventdef(startEvent : StartEvent) {
	StartEvent.eventDefinitions(startEvent, eventDefinition);
	EventDefinition(eventDefinition);
	neg find timerEventDefinitions(timerEventDefinition);
}

pattern processInstantiation(process : Process, event : StartEvent) {
	find startEventOfProcess(process, event);
	
	neg find startEventWithDefinition(event);
} or {
	find startEventOfProcess(process, event);
	
	neg find startEventDefWOTimedEventdef(event);
}

pattern runningProceess(processInstance : ProcessInstance) {
	ProcessInstance(processInstance);
	ProcessInstance.state(processInstance, ProcessState::RUNNING);
}

pattern processTermination(processInstance) {
	ProcessInstance(processInstance);
	ProcessInstance.state(processInstance, ProcessState::RUNNING);
	
	Process(process);
	
}

pattern starting(token : Token, sequenceFlow : SequenceFlow) {
	Token(token);
	StartEvent(startEvent);
	Token.element(token, startEvent);
	SequenceFlow(sequenceFlow);
	StartEvent.outgoing(startEvent, sequenceFlow);
}


pattern ending(token : Token, endEvent : EndEvent) {
	Token(token);
	SequenceFlow(sequenceFlow);
	Token.element(token, sequenceFlow);
	EndEvent(endEvent);
	EndEvent.incoming(endEvent, sequenceFlow);
}

pattern enteringTasks(token, task) {
	find runningProceess(processInstance);
	ProcessInstance.tokens(processInstance, token);
	Token.element(token, sequenceFlow);
	SequenceFlow(sequenceFlow);
	Task(task);
	SequenceFlow.targetRef(sequenceFlow, task);
}

pattern leavingTasks(processInstance, token) {
	find runningProceess(processInstance);
	ProcessInstance.tokens(processInstance, token);
	Task(task);
	Token.element(token, task);
	SequenceFlow(sequenceFlow);
	Task.outgoing(task, sequenceFlow);
}
