package org.eclipse.incquery.examples.bpmn.ttc2013.queries

import "http://www.omg.org/spec/BPMN/20100524/MODEL"
import "http://bpmn20exec"

pattern tokenOnElement(element : FlowElement, token : Token) {
	Token.element(token, element);
}

pattern startEventOfProcess(process : Process, event : StartEvent) {
	Process.flowElements(process, event);
	StartEvent(event);
}



pattern startEventWithDefinition(startEvent : StartEvent) {
	find startEventOfProcess(_, startEvent);
	StartEvent.eventDefinitions(startEvent, eventDefinition);
	EventDefinition(eventDefinition);
}

//one of the possible enabled ways a start event can be enabled for instantiation
pattern startEventWithoutEventDefinitions(startEvent : StartEvent){
	neg find startEventWithDefinition(startEvent);
}

pattern timerEventDefinitions(eventDefinition) {
	TimerEventDefinition(eventDefinition);	
}

// forall ed : ted <=> not exists ed: not ted
pattern startEventDefWOTimedEventdef(startEvent : StartEvent) {
	StartEvent.eventDefinitions(startEvent, eventDefinition);
	neg find timerEventDefinitions(eventDefinition);
}

pattern processInstantiation(process : Process, event : StartEvent) {
	find startEventOfProcess(process, event);
	neg find startEventWithDefinition(event);
} or {
	find startEventOfProcess(process, event);
	neg find startEventDefWOTimedEventdef(event);
}



pattern runningProcess(processInstance : ProcessInstance) {
	ProcessInstance.state(processInstance, ProcessState::RUNNING);
}

pattern terminableProcess(processInstance : ProcessInstance){
	find runningProcess(processInstance);
	find everyTokenInEndEvent(processInstance);
} or {
	find runningProcess(processInstance);
	find processWithoutEndEvent(processInstance);
	// TODO every token is in a flow node without outgoing arcs
}

pattern processWithoutEndEvent(processInstance : ProcessInstance){
	ProcessInstance.process.flowElements(processInstance, flowElement);
	neg find endEvent(flowElement);
}

pattern everyTokenInEndEvent(processInstance : ProcessInstance){
	ProcessInstance.tokens(processInstance, token);
	neg find tokenNotInEndEvent(token);
}

pattern tokenNotInEndEvent(token : Token){
	Token.element(token, flowElement);
	neg find endEvent(flowElement);
}

pattern endEvent(flowElement){
	EndEvent(flowElement);
}

pattern starting(token : Token, sequenceFlow : SequenceFlow) {
	StartEvent(startEvent);
	Token.element(token, startEvent);
	StartEvent.outgoing(startEvent, sequenceFlow);
}

pattern ending(token : Token, endEvent : EndEvent) {
	SequenceFlow(sequenceFlow);
	Token.element(token, sequenceFlow);
	EndEvent.incoming(endEvent, sequenceFlow);
}

pattern enteringTasks(token : Token, task : Task) {
	find runningProcess(processInstance);
	ProcessInstance.tokens(processInstance, token);
	Token.element(token, sequenceFlow);
	SequenceFlow(sequenceFlow);
	SequenceFlow.targetRef(sequenceFlow, task);
}

pattern leavingTasks(processInstance : ProcessInstance, token : Token, taskToLeave : Task) {
	find runningProcess(processInstance);
	ProcessInstance.tokens(processInstance, token);
	Token.element(token, taskToLeave);
	SequenceFlow(sequenceFlow);
	Task.outgoing(taskToLeave, sequenceFlow);
}