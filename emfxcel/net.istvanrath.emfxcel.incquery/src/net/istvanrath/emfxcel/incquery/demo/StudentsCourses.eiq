package net.istvanrath.emfxcel.incquery.demo

import epackage "http://istvanrath.net/demos/emfxcel"

import pattern net.istvanrath.emfxcel.incquery.lib.valueInNamedColumn;


/*
 * id identifies a student in the example worksheet.
 * name represents the natural name of the student.
 */
@Item(item = id, label = "$name$")
pattern student(name, id) {
	find valueInNamedColumn("Students", "First name", rowNum, firstName);
	find valueInNamedColumn("Students", "Last name", rowNum, lastName);	
	find valueInNamedColumn("Students", "Identifier", rowNum, id);
	name == eval(firstName + " " + lastName);
}

@Item(item = name, label="$name$")
pattern teacher(name)
{
	find valueInNamedColumn("Courses", "Teacher", _rowNum, name);
}

/*
 * A student identified by studentId is enrolled
 * in a course named courseName taught by a teacher
 * identified by teacherName.
 */
@Edge(source = studentId, target = teacherName, label = "taughtBy") 
pattern enrolledStudent(courseName, teacherName, studentId) {
	find valueInNamedColumn("Courses", "Course", rowNum, courseName);
	find valueInNamedColumn("Courses", "Teacher", rowNum, teacherName);
	find valueInNamedColumn("Courses", "Student Identifier", rowNum, studentId);
}	

/*
 * A student identified by name did not apply
 * for any known course.
 */
pattern didNotApplyForAnyCourse(name) {
	neg find enrolledStudent(_c, _t, id);
	find student(name, id);
}

/*
 * A student identified by name that has
 * applied to multiple courses concurrently.
 */
pattern appliedToMultipleCourses(name) {
	find student(name, id);
	find enrolledStudent(c1, _t1, id);
	find enrolledStudent(c2, _t2, id);
	c1 != c2;
}

/*
 * A course identified by its name c
 * has inconsistent entries (having different teachers).
 */
pattern inconsistentCourse(c) {
	find enrolledStudent(c, t1, _s1);
	find enrolledStudent(c, t2, _s2);
	t1 != t2;
}
